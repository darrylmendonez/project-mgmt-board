{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialBacklog","id","uuidv4","content","initialToDo","initialInProgress","initialReview","initialDone","columnsFromBackend","name","items","App","useState","columns","setColumns","style","display","justifyContent","height","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","splice","index","removed","column","copiedItems","Object","entries","map","key","flexDirection","alignItems","margin","provided","snapshot","droppableProps","ref","innerRef","background","isDraggingOver","padding","width","minHeight","item","draggableId","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebbdaac5.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst initialBacklog = [\n  { id: uuidv4(), content: 'Create services page'},\n  { id: uuidv4(), content: 'Create about page'},\n  { id: uuidv4(), content: 'Create contact page'}\n];\n\nconst initialToDo = [\n  { id: uuidv4(), content: 'Create products page'}\n]\n\nconst initialInProgress = [\n  { id: uuidv4(), content: 'Create jumbotron for homepage'},\n  { id: uuidv4(), content: 'Create cards for each subpage on homepage'}\n]\n\nconst initialReview = [\n  {id: uuidv4(), content: 'Create navbar'}\n]\n\nconst initialDone = [\n  {id: uuidv4(), content: 'Create footerbar'}\n]\n\nconst columnsFromBackend = {\n  [uuidv4()]: {\n    name: 'Backlog',\n    items: initialBacklog\n  },\n  [uuidv4()]: {\n    name: 'To Do',\n    items: initialToDo\n  },\n  [uuidv4()]: {\n    name: 'In Progress',\n    items: initialInProgress\n  },\n  [uuidv4()]: {\n    name: 'Review',\n    items: initialReview\n  },\n  [uuidv4()]: {\n    name: 'Done',\n    items: initialDone\n  }\n}\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1);\n    destItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: {\n        ...destColumn,\n        items: destItems\n      }\n    })\n  } else {\n    const column = columns[source.droppableId];\n    const copiedItems = [...column.items]\n    const[removed] = copiedItems.splice(source.index, 1);\n    copiedItems.splice(destination.index, 0, removed);\n    setColumns({\n      ...columns,\n      [source.droppableId]: {\n        ...column,\n        items: copiedItems\n      }\n    })\n  }\n}\n\nfunction App() {\n  const [columns, setColumns] = useState(columnsFromBackend);\n  return (\n    <div style={{ display: 'flex', justifyContent: 'center', height: '100%' }}>\n      <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\n        {Object.entries(columns).map(([id, column]) => {\n          return (\n            <div key={id} style={{ display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n              <h2>{column.name}</h2>\n              <div style={{ margin: '8px' }}>\n                <Droppable droppableId={id} key={id}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        style={{\n                          background: snapshot.isDraggingOver ? 'lightblue' : 'lightgrey',\n                          padding: 4,\n                          width: 250,\n                          minHeight: 500\n                        }}\n                      >\n                        {column.items.map((item, index) => {\n                          return (\n                            <Draggable key={item.id} draggableId={item.id} index={index}>\n                              {(provided, snapshot) => {\n                                return (\n                                  <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  style={{\n                                    userSelect: 'none',\n                                    padding: 16,\n                                    margin: '0 0 8px 0',\n                                    minHeight: '50px',\n                                    backgroundColor: snapshot.isDragging ? '#263B4A' : '#456C86',\n                                    color: 'white',\n                                    ...provided.draggableProps.style\n                                  }}\n                                  >\n                                    {item.content}\n                                  </div>\n                                )\n                              }}\n                            </Draggable>\n                          );\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    )\n                  }}\n                </Droppable>\n              </div>\n            </div>\n          )\n        })}\n      </DragDropContext>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}